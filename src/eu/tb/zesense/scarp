		// loop for receiving multiple responses
		do {
	
			// receive response
			System.out.println("Receiving response...");
			Response response = null;
			try {
				if (selector == 1) {
					response = accelRequest.receiveResponse();
					selector = 2;
				}
				else if (selector == 2) {
					response = proxRequest.receiveResponse();
					selector = 3;
				}
				else if (selector == 3) {
					response = lightRequest.receiveResponse();
					selector = 1;
				}
			} catch (InterruptedException e) {
				System.err.println("Failed to receive response: " + e.getMessage());
				System.exit(Registry.ERR_RESPONSE_FAILED);
			}
	
			// process response
			if (response != null) {
				
				// get token and corresponding resource to identify the stream
				byte[] recToken = response.getToken();
				String recResource = response.getRequest().getUriPath();
				System.out.println("Token:"+new String(recToken)+" resource:"+recResource);
				ZeStream recStream = findStream(streams, recToken, recResource);
				boolean streamFound = false;
				if (recStream != null) streamFound = true;
				System.out.println("Stream found, token:"+new String(recStream.token)+" resource:"+recStream.resource);
				
				// check if it can be part of any stream
				ArrayList<Option> observeOptList = 
						(ArrayList<Option>) response.getOptions(OptionNumberRegistry.OBSERVE);
				boolean isNotification = false;
				if ( !observeOptList.isEmpty() ) isNotification = true;
				
				byte[] pay = response.getPayload();
				DataInputStream dataStream = new DataInputStream(new ByteArrayInputStream(pay));
				boolean validLength = false;
				if (pay.length >= Registry.PAYLOAD_HDR_LENGTH)
					validLength = true;
				
				if (streamFound && isNotification && validLength) {

					try {
						
						byte packetType = dataStream.readByte();
						byte sensorType = dataStream.readByte();
						short length = dataStream.readShort();
						
						Option observeOpt = observeOptList.get(0);
						int sequenceNumber = observeOpt.getIntValue();
						
						if (packetType == Registry.DATAPOINT) {
							
							int timestamp = dataStream.readInt();
		
							if (sensorType == Registry.SENSOR_TYPE_ACCELEROMETER) {
								
								System.out.println("Got accelerometer data");
								
								ZeAccelElement event = new ZeAccelElement();
								event.x = Float.parseFloat(new String(Arrays.copyOfRange(pay, 8, 27)));
								event.y = Float.parseFloat(new String(Arrays.copyOfRange(pay, 28, 47)));
								event.z = Float.parseFloat(new String(Arrays.copyOfRange(pay, 48, 67)));
								event.timestamp = timestamp;
								event.sequenceNumber = sequenceNumber;
								//event.meaning = Registry.PLAYOUT_VALID;
								
								recStream.registerArrival(event);
								
								System.out.println("packet:"+packetType+
										" sensor:"+sensorType+
										" length:"+length+
										" ts:"+timestamp+
										" sn"+sequenceNumber+
										" x:"+event.x+
										" y:"+event.y+
										" z:"+event.z);
								
								/* Cannot send to playout if I haven't got at least
								 * an Sender Report with timing mapping. Although
								 * conceptually this evaluation should be moved
								 * inside the playout manager.. */
								if (recStream.timingReady) {
									recStream.toWallclock(event);
									/* Yes the playouts should belong to a stream... */
									accelPlayoutManager.add(event);
									meters.accelBufferSeries.add(meters.accelBufferSeries.getItemCount()+1,
											accelPlayoutManager.size());
								}
								else
									System.out.println("Not sending to playout, timing still unknown.");
								
								//if (recStream.packetsReceived == 40) {
								//	masterPlayoutManager.mpo+=500000000L;
								//}
							}
							
							else if (sensorType == Registry.SENSOR_TYPE_PROXIMITY) {
								
								System.out.println("Got proximity data");
								
								ZeProxElement pevent = new ZeProxElement();
								pevent.distance = Float.parseFloat(new String(Arrays.copyOfRange(pay, 8, 27)));
								pevent.timestamp = timestamp;
								pevent.sequenceNumber = sequenceNumber;
								//pevent.meaning = Registry.PLAYOUT_VALID;
								
								recStream.registerArrival(pevent);
								
								System.out.println("packet:"+packetType+
										" sensor:"+sensorType+
										" length:"+length+
										" ts:"+timestamp+
										" sn"+sequenceNumber+
										" dist:"+pevent.distance);
								
								/* Cannot send to playout if I haven't got at least
								 * an Sender Report with timing mapping. Although
								 * conceptually this evaluation should be moved
								 * inside the playout manager.. */
								if (recStream.timingReady) {
									recStream.toWallclock(pevent);
									/* Yes the playouts should belong to a stream... */
									proxPlayoutManager.add(pevent);
									meters.proxBufferSeries.add(meters.proxBufferSeries.getItemCount()+1,
											proxPlayoutManager.size());
								}
								else
									System.out.println("Not sending to playout, timing still unknown.");
								
								//if (recStream.packetsReceived == 40) {
								//	masterPlayoutManager.mpo+=500000000L;
								//}
							}
							
							else if (sensorType == Registry.SENSOR_TYPE_LIGHT) {
								
								System.out.println("Got light data");
								
								ZeLightElement pevent = new ZeLightElement();
								pevent.light = Float.parseFloat(new String(Arrays.copyOfRange(pay, 8, 27)));
								pevent.timestamp = timestamp;
								pevent.sequenceNumber = sequenceNumber;
								//pevent.meaning = Registry.PLAYOUT_VALID;
								
								recStream.registerArrival(pevent);
								
								System.out.println("packet:"+packetType+
										" sensor:"+sensorType+
										" length:"+length+
										" ts:"+timestamp+
										" sn"+sequenceNumber+
										" light:"+pevent.light);
								
								/* Cannot send to playout if I haven't got at least
								 * an Sender Report with timing mapping. Although
								 * conceptually this evaluation should be moved
								 * inside the playout manager.. */
								if (recStream.timingReady) {
									recStream.toWallclock(pevent);
									/* Yes the playouts should belong to a stream... */
									lightPlayoutManager.add(pevent);
									meters.lightBufferSeries.add(meters.lightBufferSeries.getItemCount()+1,
											lightPlayoutManager.size());
								}
								else
									System.out.println("Not sending to playout, timing still unknown.");
								
								//if (recStream.packetsReceived == 40) {
								//	masterPlayoutManager.mpo+=500000000L;
								//}
							}
							
							
		
						}
						else if (packetType == Registry.SENDREPORT) {
							
							long ntpts = dataStream.readLong();							
							int rtpts = dataStream.readInt();
							int packetCount = dataStream.readInt();
							int octectCount = dataStream.readInt();
							byte[] cname = new byte[length];
							dataStream.readFully(cname);
							System.out.println("packet:"+packetType+
									" sensor:"+sensorType+
									" length:"+length+
									" sn"+sequenceNumber+
									" ntpts:"+ntpts+
									" rtpts:"+rtpts+
									" packetCount:"+packetCount+
									" octectCount:"+octectCount+
									" cname:"+new String(cname));
							
							if (firstSR) {
								firstSR = false;
								long blindDelay = 1000000000L;
								masterPlayoutManager.mpo = System.nanoTime() + blindDelay - ntpts;
							}
							
							if (recStream.timingReady == false) {
								recStream.updateTiming(rtpts, ntpts);
								recStream.octectCount = octectCount;
								recStream.packetCount = packetCount;
							}
						}
						else 
							System.out.println("Unknown payload format, drop.");
					
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				}
				else if ( !streamFound && isNotification && validLength) {
					System.out.println("Stream record not found but packet seems well formed.");
				}
				else {
					System.out.println("Some problems in the response..");
				}

				/*
				//DataInputStream stream = new DataInputStream(new ByteArrayInputStream(pay));
				//byte[] z = new byte[4];
				//stream.skipBytes(39);
				//stream.read(z, 36, 3);
				*/
				System.out.println("Time elapsed (ms): " + response.getRTT());

				//response.prettyPrint();
				
				// check of response contains resources
				if (response.getContentType()==MediaTypeRegistry.APPLICATION_LINK_FORMAT) {

					String linkFormat = response.getPayloadString();

					// create resource three from link format
					Resource root = RemoteResource.newRoot(linkFormat);
					if (root != null) {

						// output discovered resources
						System.out.println("\nDiscovered resources:");
						root.prettyPrint();

					} else {
						System.err.println("Failed to parse link format");
						System.exit(Registry.ERR_BAD_LINK_FORMAT);
					}
				} else {

					// check if link format was expected by client
					if (method.equals("DISCOVER")) {
						System.out.println("Server error: Link format not specified");
					}
				}

			} else {

				// no response received	
				System.err.println("Request timed out");
				break;
			}

		} while (loop);